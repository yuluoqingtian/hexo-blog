<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1、rollup环境搭建</title>
    <url>/hexo-blog/%E5%89%8D%E7%AB%AF/vue/%E6%89%8B%E5%86%99vue2%E6%BA%90%E7%A0%81/%E5%89%8D%E7%AB%AF/vue/%E6%89%8B%E5%86%99vue2%E6%BA%90%E7%A0%81/1%E3%80%81rollup%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h2><ul>
<li>搭建 vue源码开发环境，使用rollup工具进行打包。</li>
<li>有sourcemap，能够调试源码。</li>
<li>打包成 umd 模块能在浏览器中直接引入。</li>
<li>使用babel编译成ES5增加兼容性。</li>
</ul>
<h2 id="1-新建项目文件夹-vue2-stage"><a href="#1-新建项目文件夹-vue2-stage" class="headerlink" title="1. 新建项目文件夹 vue2-stage"></a>1. 新建项目文件夹 vue2-stage</h2><p><code>npm init -y</code> 初始化项目</p>
<blockquote>
<p>npm init -y是一个用于在Node.js项目中快速生成默认package.json文件的命令。</p>
<p>通过运行<code>npm init -y</code>命令，你可以快速生成一个默认的<code>package.json</code>文件，而无需手动输入每个字段的值。<code>-y</code>选项表示“yes”，即自动接受所有默认值。</p>
</blockquote>
<h2 id="2-安装-rollup-打包工具"><a href="#2-安装-rollup-打包工具" class="headerlink" title="2. 安装 rollup 打包工具"></a>2. 安装 rollup 打包工具</h2><p><code>npm install rollup</code></p>
<blockquote>
<p>Rollup是一个轻量、高效的JavaScript模块打包器，专注于ES模块，具有优化代码大小和性能的特点。</p>
</blockquote>
<h2 id="3-安装-rollup-plugin-babel-插件-、-babel核心模块、以及babel的预设"><a href="#3-安装-rollup-plugin-babel-插件-、-babel核心模块、以及babel的预设" class="headerlink" title="3. 安装 rollup-plugin-babel 插件 、 babel核心模块、以及babel的预设"></a>3. 安装 rollup-plugin-babel 插件 、 babel核心模块、以及babel的预设</h2><p><code>npm install rollup-plugin-babel @babel/core @babel/preset-env --save-dev</code></p>
<blockquote>
<p>Babel是一个广泛使用的JavaScript编译工具，用于将最新版本的JavaScript代码转换为向后兼容的版本，以便在不支持最新语法和特性的环境中运行。</p>
</blockquote>
<p>以上库都安装在开发依赖中 <code>-dev</code>。</p>
<h2 id="4-新增-rollup-打包配置文件rollup-config-js"><a href="#4-新增-rollup-打包配置文件rollup-config-js" class="headerlink" title="4. 新增 rollup 打包配置文件rollup.config.js"></a>4. 新增 rollup 打包配置文件<code>rollup.config.js</code></h2><p>执行打包命令的时候会默认找这个配置文件。在其中添加配置如下</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-babel&#x27;</span></span><br><span class="line"><span class="comment">// rollup 打包配置文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">input</span>: <span class="string">&quot;./src/index.js&quot;</span>, <span class="comment">// 入口</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">file</span>: <span class="string">&quot;./dist/vue.js&quot;</span>, <span class="comment">//出口</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Vue&quot;</span>, <span class="comment">// 指定输出的包的名称（变量名）用于在浏览器环境中通过&lt;script&gt;标签引入打包后的文件时，暴露的全局变量名</span></span><br><span class="line">    <span class="attr">format</span>:<span class="string">&#x27;umd&#x27;</span>, <span class="comment">//导出的代码使用何种模块化规范，可选值：amd、cjs、es、iife、umd、system</span></span><br><span class="line">    <span class="attr">sourcemap</span>:<span class="literal">true</span>, <span class="comment">// 希望可以调试源代码</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>:[</span><br><span class="line">    <span class="title function_">babel</span>(&#123;</span><br><span class="line">        <span class="attr">exclude</span>:<span class="string">&#x27;node_modules/**&#x27;</span> <span class="comment">// 排除node_module的所有文件</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="5-新建文件-babelrc"><a href="#5-新建文件-babelrc" class="headerlink" title="5. 新建文件.babelrc"></a>5. 新建文件<code>.babelrc</code></h2><p>rollup配置中使用了babel插件，babel也需要有一个配置文件，新建文件<code>.babelrc</code>，并使用<code>@babel/preset-env</code>预设</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;@babel/preset-env&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>@babel&#x2F;preset-env作为一个预设，提供了智能地根据目标环境进行配置的能力。它根据你指定的目标浏览器、Node.js版本或其他运行环境，自动确定需要的Babel插件和转换规则，并生成适合该环境的转换代码。</p>
</blockquote>
<h2 id="6-新增打包命令"><a href="#6-新增打包命令" class="headerlink" title="6. 新增打包命令"></a>6. 新增打包命令</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span><span class="string">&quot;rollup -cw&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数中c表示使用配置文件，w表示监控文件变化</span></span><br></pre></td></tr></table></figure>

<h2 id="7-查看打包结果"><a href="#7-查看打包结果" class="headerlink" title="7. 查看打包结果"></a>7. 查看打包结果</h2><p>此时可以运行 <code>npm run dev</code> 来查看打包结果</p>
<blockquote>
<p>若运行时报错 Error: Cannot find module ‘node:process’，可能时由于node版本和rollup版本不匹配导致的，降低至 “rollup”: “2.56.0” 后成功。</p>
</blockquote>
<p>打包后生成了vue.js 文件以及 sourcemap文件。目录结构以及打包后的文件结构如下。</p>
<p><img src="https://cdn.staticaly.com/gh/yuluoqingtian/picx-images-hosting@master/20230617/image.6rw1v7u6gdw0.webp" alt="https://cdn.staticaly.com/gh/yuluoqingtian/picx-images-hosting@master/20230617/image.6rw1v7u6gdw0.webp"></p>
<p>因为我们打包模块的规则选的时umd，所以是可以在浏览器中运行的，并且会添加一个全局变量Vue。</p>
<h2 id="8-在dist下新建index-html-用于测试"><a href="#8-在dist下新建index-html-用于测试" class="headerlink" title="8. 在dist下新建index.html 用于测试"></a>8. 在dist下新建index.html 用于测试</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Vue&quot;</span>, <span class="title class_">Vue</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到控制台打印出了我们Vue对象的相关信息</p>
<p><img src="https://cdn.staticaly.com/gh/yuluoqingtian/picx-images-hosting@master/20230617/image.1c1c8j5m4p28.webp" alt="https://cdn.staticaly.com/gh/yuluoqingtian/picx-images-hosting@master/20230617/image.1c1c8j5m4p28.webp"></p>
<h2 id="至此，基本开发环境搭建完成！"><a href="#至此，基本开发环境搭建完成！" class="headerlink" title="至此，基本开发环境搭建完成！"></a><strong>至此，基本开发环境搭建完成！</strong></h2>]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
        <category>手写vue2源码</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>2、实现响应式数据</title>
    <url>/hexo-blog/%E5%89%8D%E7%AB%AF/vue/%E6%89%8B%E5%86%99vue2%E6%BA%90%E7%A0%81/%E5%89%8D%E7%AB%AF/vue/%E6%89%8B%E5%86%99vue2%E6%BA%90%E7%A0%81/2%E3%80%81%E5%AE%9E%E7%8E%B0%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>实现 <code>new Vue(&#123;data&#125;)</code> 中数据的响应式，值改变时能监控到。</li>
<li>data中已存在的属性，属性值如果是一个对象a，a中的属性。和将属性值改变为一个新的对象b，b中的属性，都需要做到相应式。</li>
<li>将data中的所有属性通过代理，挂载到vm实例上面，可以通过 <code>vm[key]</code> 直接读取和操作。</li>
</ul>
<h2 id="功能整体结构"><a href="#功能整体结构" class="headerlink" title="功能整体结构"></a>功能整体结构</h2><p><img src="https://cdn.staticaly.com/gh/yuluoqingtian/picx-images-hosting@master/20230618/%E5%AE%9E%E7%8E%B0%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE.drawio.4nse0ogsuru0.webp" alt="https://cdn.staticaly.com/gh/yuluoqingtian/picx-images-hosting@master/20230618/实现响应式数据.drawio.4nse0ogsuru0.webp"></p>
<h2 id="1-暴露Vue构造函数"><a href="#1-暴露Vue构造函数" class="headerlink" title="1. 暴露Vue构造函数"></a>1. 暴露Vue构造函数</h2><p>在使用Vue的时候，我们是这样用的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            console.log(&#x27;this1&#x27;, this)</span><br><span class="line">          return &#123;</span><br><span class="line">            name: &quot;foo&quot;,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>

<p>直接new一个Vue实例，并且传入了配置项参数。所以我们的index.js入口文件，需要暴露一个名为Vue的构造函数，并且接受参数options，对配置进行一些初始化操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Vue</span>(<span class="params">options</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_init</span>(options)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">initMixin</span>(<span class="title class_">Vue</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里的initMixin 是写在init.js中的方法，目的是给Vue原型增加_init方法，详见第2步。</p>
</blockquote>
<h2 id="2-创建init-js"><a href="#2-创建init-js" class="headerlink" title="2. 创建init.js"></a>2. 创建init.js</h2><p>init.js 暴露一个函数initMixin，则个函数主要是用来给Vue原型增加_init方法，init方法中，需要将用户传入的配置挂在到vm实例的$options属性上面。并且调用<code>initState()</code>方法去初始化状态。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//init.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">initMixin</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_init</span> = <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="variable language_">this</span>;</span><br><span class="line">    vm.<span class="property">$options</span> = options;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化状态</span></span><br><span class="line">    <span class="title function_">initState</span>(vm);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-创建state-js"><a href="#3-创建state-js" class="headerlink" title="3. 创建state.js"></a>3. 创建state.js</h2><p><code>steate.js</code> 中，暴露initState方法，后续data，props，watch等的初始化会写在这里。</p>
<p>如果vm.$options.data有值的化，则执行初始化data的方法，initData()，initData中会对data进行数据观测——<code>observe(data)</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//state.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">initState</span>(<span class="params">vm</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> opts = vm.<span class="property">$options</span>;</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">data</span>) &#123;</span><br><span class="line">    <span class="title function_">initData</span>(vm);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initData</span>(<span class="params">vm</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> data = vm.<span class="property">$options</span>.<span class="property">data</span>;</span><br><span class="line"></span><br><span class="line">  data = vm.<span class="property">_data</span> = <span class="title function_">isFunction</span>(data) ? data.<span class="title function_">call</span>(vm) : data;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">observe</span>(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-observe-x2F-index-js"><a href="#4-observe-x2F-index-js" class="headerlink" title="4. observe&#x2F;index.js"></a>4. observe&#x2F;index.js</h2><p>新建observe目录，以及index.js，作为数据观测的入口。</p>
<p>这是我们本次目标要实现的重点功能，通过<code>Object.defineProperty</code> ,遍历data中的数据属性，重新定义每个属性，并添加getter和setter。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// observe/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; isObject &#125; <span class="keyword">from</span> <span class="string">&quot;../utils&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">// 对对象中的所有属性进行劫持</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">walk</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">walk</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">defineReactive</span>(data, key, data[key]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将data中每个属性 用 defineProperty重新的定义</span></span><br><span class="line"><span class="comment">// 因为是遍历+递归，所以性能差</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">data, key, value</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果属性的值也是一个对象，就再进行劫持</span></span><br><span class="line">  <span class="title function_">observe</span>(value);</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, key, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果用户新赋值一个对象，也要对其进行劫持</span></span><br><span class="line">      <span class="title function_">observe</span>(newVal);</span><br><span class="line">      value = newVal;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果是对象才观测</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(data)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 默认最外层的data是一个对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Observer</span>(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<aside>
💡 为什么defineReactive中要把 data[key] 作为value传进去，而不是在defineReactive直接改变读取或改变data[key]？
    </aside>


<p>其实我们在defineReactive中，使用一个新的，有getter和setter的属性，覆盖了原来的data中的key，所以在getter中直接读data[key]，又会进入getter，陷入无限循环，setter也是同理。</p>
<p>我们将原来的值作为初始值value传进来，getter和setter中都是对这个value进行操作，不会有问题。</p>
<aside>
💡 为什么defineReactive的一开始和setter中，还要调用observe()
</aside>

<p>因为data中的属性可能是对象的嵌套，我们不仅要观测第一层属性，也要观测深层的对象，所以defineReactive开始调用observe，如果data[key]是一个对象的话，就递归观测。</p>
<p>如果用户给某个属性赋值为一个对象，我们同样也要让其成为响应式的，所以在setter中也要对设置的新值进行观测。</p>
<aside>
💡 现在有哪些属性是响应式的，哪些不是？
</aside>

<p>通过我们上面的代码不难归纳出</p>
<p>响应式的属性：</p>
<ol>
<li>data中本来就存在的属性，是响应式的</li>
<li>data中深层级中对象中的属性，是响应式的</li>
<li>给响应式的某个属性赋值为一个对象，该对象的属性也是响应式的</li>
</ol>
<p>非相应式的属性：</p>
<ol>
<li>像对象中直接添加一个新的属性，该属性不是响应式的</li>
</ol>
<h2 id="5-通过代理，将data中的属性挂在到vm实例上面。"><a href="#5-通过代理，将data中的属性挂在到vm实例上面。" class="headerlink" title="5. 通过代理，将data中的属性挂在到vm实例上面。"></a>5. 通过代理，将data中的属性挂在到vm实例上面。</h2><p>现在所有相应式的数据存在vm._data中，但是为了方便用户使用，其实我们在vue中是可以直接通过vm[key]访问到data中的响应式数据的。此处可以通过代理的方式将对vm[key]的操作映射到vm._data[key]上面。还是使用 Object.defineProperty劫持数据操作。</p>
<blockquote>
<p>注意此处说的代理不是ES6的Proxy，只是一种思想。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// state.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">proxy</span>(<span class="params">vm, source, key</span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(vm, key, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> vm[source][key];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">      vm[source][key] = newVal;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initData</span>(<span class="params">vm</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> data = vm.<span class="property">$options</span>.<span class="property">data</span>;</span><br><span class="line"></span><br><span class="line">  data = vm.<span class="property">_data</span> = <span class="title function_">isFunction</span>(data) ? data.<span class="title function_">call</span>(vm) : data;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将data中的属性挂载到vm实例上</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">    <span class="title function_">proxy</span>(vm, <span class="string">&quot;_data&quot;</span>, key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">observe</span>(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-在页面中测试"><a href="#6-在页面中测试" class="headerlink" title="6. 在页面中测试"></a>6. 在页面中测试</h2><p>此时，可以在页面中，对以上的功能进行测试</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// index.html</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&quot;foo&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">obj</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">key1</span>: <span class="string">&quot;1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">obj2</span>: <span class="string">&quot;2&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      vm.<span class="property">obj2</span> = &#123; <span class="attr">key2</span>: <span class="string">&quot;2&quot;</span> &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;vm&quot;</span>, vm);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.staticaly.com/gh/yuluoqingtian/picx-images-hosting@master/20230618/image.1n4wn9ttidb4.webp" alt="https://cdn.staticaly.com/gh/yuluoqingtian/picx-images-hosting@master/20230618/image.1n4wn9ttidb4.webp"></p>
<p>可以看到，name，obj1，obj2这3个属性都已经挂在到了vm实例上，并且有getter和setter。obj1属于data中的嵌套对象，其中的key1也是响应式的。obj2开始的值不是对象，后赋值为一个对象，该对象中的key2也有了getter和setter。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>Vue数据响应式的原理就是递归遍历data中的每一个属性，用Object.defineProperty，重新定义该属性，并添加getter和setter。这就是为什么当data中数据过多，vue2性能会变差的原因，所以如果想要在vue2中提高性能，应尽量使data扁平化。</li>
<li>通过vue添加相应式的原理可知，对一个对象直接添加一个属性，该属性并不是响应式的，所以这就是为什么要用Vue.$set去新增属性的原因。</li>
</ol>
<h2 id="源码附件"><a href="#源码附件" class="headerlink" title="源码附件"></a>源码附件</h2><p><a href="/hexo-blog/files/%E6%89%8B%E5%86%99vue2%E6%BA%90%E7%A0%81/code1.zip">code.zip</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
        <category>手写vue2源码</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>如何实现自定义v-model</title>
    <url>/hexo-blog/%E5%89%8D%E7%AB%AF/vue/vue%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/%E5%89%8D%E7%AB%AF/vue/vue%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89v-model/</url>
    <content><![CDATA[<p>v-model其实是一个语法糖，默认传递名为value的prop并监听input事件，把触发input事件传过来的值用用来更新v-model绑定的变量。在子组件中用model选项可以更改prop的名字或者event的名字。具体参考下方示例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;custom-input v-model=<span class="string">&quot;msg&quot;</span>&gt;&lt;/custom-input&gt;</span><br><span class="line"><span class="comment">// 因为是语法糖，所以也等同于下面的写法</span></span><br><span class="line"><span class="comment">//&lt;custom-input :myValue=&quot;msg&quot; @myEvent=&quot;v=&gt;msg=v&quot;/&gt;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: [<span class="string">&#x27;custom-input&#x27;</span>],</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">msg</span>:<span class="string">&#x27;init message&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template lang=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是我的组件，可以接受v-model参数<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;myValue&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;$emit(&#x27;myEvent&#x27;, $event.target.value)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>:[<span class="string">&#x27;myValue&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">model</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">prop</span>:<span class="string">&#x27;myValue&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">event</span>:<span class="string">&#x27;myEvent&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//model不指定的话默认默认是&#123;prop:&#x27;value&#x27;,event:&#x27;input&#x27;&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
        <category>vue开发技巧</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
